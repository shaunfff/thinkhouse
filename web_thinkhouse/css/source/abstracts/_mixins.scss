@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin placeholder-color($color, $opacity) {
  &.placeholder {
    color: $color;
    opacity: $opacity;
  }

  &:-moz-placeholder {
    color: $color;
    opacity: $opacity;
  }

  &::-webkit-input-placeholder {
    color: $color;
    opacity: $opacity;
  }

  &:-ms-input-placeholder {
    color: $color;
    opacity: $opacity;
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin centerer($pole, $X: 50, $Y: 50, $yOffset: 0) {
  position: absolute;
  left: $X * 1%;
  @if $pole == "bottom" {
    top: auto;
    @if $Y == 0 {
      bottom: $yOffset;
    } @else {
      bottom: $Y * 1%;
    }
  } @else {
    bottom: auto;
    @if $Y == 0 {
      top: $yOffset;
    } @else {
      top: $Y * 1%;
    }
  }

  transform: translate($X * -1%, $Y * -1%);
}

// Mixin for hamburger icon
@mixin menu-icon(
  $width: 25px,
  $height: 24px,
  $bar: 2px,
  $color: white,
  $reverse-color: white,
  $transition: $time-transition
) {
  width: $width;
  height: $height;
  transform: rotate(0deg);
  transition: $transition ease-in-out;
  cursor: pointer;
  &:hover {
    span {
      background: $reverse-color;
    }
  }
  span {
    display: block;
    position: absolute;
    height: $bar;
    width: 100%;
    background: $color;
    opacity: 1;
    left: 0;
    transform: rotate(0deg);
    transition: $transition ease-in-out;
    &:nth-child(1) {
      top: 0px;
    }
    &:nth-child(2) {
      top: calc(50% - #{$bar/2});
    }
    &:nth-child(3) {
      top: $height - $bar;
    }
  }
  &.open {
    span {
      background: $color;
      &:nth-child(1) {
        transform-origin: center;
        transform: rotate(45deg);
        top: 50%;
      }
      &:nth-child(2) {
        width: 0;
      }

      &:nth-child(3) {
        transform-origin: center;
        transform: rotate(-45deg);
        top: 50%;
      }
    }
  }
}
@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));

  width: $width;
  height: 0;
  padding-bottom: $height;
}

@mixin aspect-ratio($arglist... /*$ratio or $width, $height*/) {
  $map: keywords($arglist);
  $height: map-get($map, height) or nth-value($arglist, 2);
  $width: map-get($map, width) or nth-value($arglist, 1);
  $ratio: map-get($map, ratio) or
    if($width and $height, $width/$height, nth-value($arglist, 1)) or 1;
  $padding: 1 / $ratio * 100%;
  &::before,
  &::after {
    content: "";
    display: table;
    clear: both;
    width: 1px;
    margin-left: -1px;
  }
  &::before {
    float: left;
    padding-bottom: $padding;
  }
}

// Helper function
// Return null rather than throwing an error if index is outside list range.
@function nth-value($list, $index) {
  @return if(length($list) >= $index, nth($list, $index), null);
}

/* ==============
  MIXIN
============== */
/*  ---------------------------
Sass conversion of Adam Schwartz's "Smarter Link Underline"
-- (https://eager.io/blog/smarter-link-underlines/)

Example Usage:
  a {
    @include link-underline(
      $color-background,
      $color-text,
      $color-selection,
      $underline-boldness
    );
  }

NOTE:
$underline-boldness is an optional modifier which will
default to the normal weight unless set to 'bold'

You can downlooad this mixin on npm
(https://github.com/ekfuhrmann/scss-link-underline)
--------------------------- */

@mixin text-underline-crop($background) {
  text-shadow: 0.03em 0 $background, -0.03em 0 $background, 0 0.03em $background,
    0 -0.03em $background, 0.06em 0 $background, -0.06em 0 $background,
    0.09em 0 $background, -0.09em 0 $background, 0.12em 0 $background,
    -0.12em 0 $background, 0.15em 0 $background, -0.15em 0 $background;
}

@mixin text-underline($color-bg, $color-text, $underline-boldness) {
  background-image: linear-gradient($color-text, $color-text);
  background-repeat: repeat-x;

  // Choose whether underline is bold or normal
  @if ($underline-boldness == "bold") {
    background-position: 0% 100%;
    background-size: 1px 2px;
  } @else {
    background-position: 0% 92%;
    background-size: 1px 1px;
  }
}

// Highlight color
@mixin text-selection($selection) {
  &::selection {
    @include text-underline-crop($selection);
    display: block;
    width: 100%;
    background: $selection;
  }
}

@mixin link-underline(
  $background,
  $text,
  $selection,
  $underline-boldness: "normal"
) {
  @include text-underline-crop($background);
  @include text-underline($background, $text, $underline-boldness);
  @include text-selection($selection);
  color: $text;
  text-decoration: none;

  *,
  *::after,
  &::after,
  *::before,
  &::before {
    text-shadow: none;
  }

  &:visited {
    color: $text;
  }
}

@mixin triangle($direction, $sizeH, $sizeV, $color) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border-style: solid;
  -moz-transform: scale(0.9999);

  @if $direction == top {
    border-width: 0 $sizeV $sizeH $sizeV;
    border-color: transparent transparent $color transparent;
  }
  @if $direction == bottom {
    border-width: $sizeV $sizeH 0 $sizeV;
    border-color: $color transparent transparent transparent;
  }
  @if $direction == left {
    border-width: $sizeV $sizeH $sizeV 0;
    border-color: transparent $color transparent transparent;
  }
  @if $direction == right {
    border-width: $sizeV 0 $sizeV $sizeH;
    border-color: transparent transparent transparent $color;
  }
  @if $direction == topright {
    border-width: 0 $sizeH $sizeV 0;
    border-color: transparent $color transparent transparent;
  }
  @if $direction == bottomright {
    border-width: 0 0 $sizeH $sizeV;
    border-color: transparent transparent $color transparent;
  }
  @if $direction == bottomleft {
    border-width: $sizeH 0 0 $sizeV;
    border-color: transparent transparent transparent $color;
  }
  @if $direction == topleft {
    border-width: $sizeH $sizeV 0 0;
    border-color: $color transparent transparent transparent;
  }
}

@mixin flexCenter() {
  display: flex;
  justify-content: center;
  align-items: center;
}
@mixin h3Intro() {
  font-size: $f-medium;
  color: $white;
  font-weight: $demi;
  display: flex;
  position: relative;
  align-self: flex-start;
  max-width: $line-length;
  line-height: $feature-line-height;
}

@mixin h4Intro() {
  font-size: $f-large;
  color: $white;
  font-weight: $demi;
  display: flex;
  position: relative;
  align-self: flex-start;
  max-width: $line-length;
  line-height: $feature-line-height;
}

@mixin largeText($case) {
  font-weight: $heavy;
  font-size: $f-xxxlarge;
  color: $white;
  text-transform: $case;
}

@mixin introText() {
  font-size: $f-xxlarge;
  font-weight: $demi;
  line-height: $feature-line-height;
  max-width: $line-length;
}
